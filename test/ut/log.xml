<?xml version="1.0"?>

<valgrindoutput>

<protocolversion>4</protocolversion>
<protocoltool>memcheck</protocoltool>

<preamble>
  <line>Memcheck, a memory error detector</line>
  <line>Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.</line>
  <line>Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info</line>
  <line>Command: ./jvalut</line>
</preamble>

<pid>18430</pid>
<ppid>18429</ppid>
<tool>memcheck</tool>

<args>
  <vargv>
    <exe>/usr/bin/valgrind.bin</exe>
    <arg>--suppressions=/usr/lib/valgrind/debian-libc6-dbg.supp</arg>
    <arg>-v</arg>
    <arg>--tool=memcheck</arg>
    <arg>--num-callers=15</arg>
    <arg>--track-origins=yes</arg>
    <arg>--gen-suppressions=no</arg>
    <arg>--leak-check=full</arg>
    <arg>--leak-resolution=high</arg>
    <arg>--show-reachable=yes</arg>
    <arg>--xml=yes</arg>
    <arg>--xml-file=log.xml</arg>
  </vargv>
  <argv>
    <exe>./jvalut</exe>
  </argv>
</args>

<status>
  <state>RUNNING</state>
  <time>00:00:00:00.088 </time>
</status>


<status>
  <state>FINISHED</state>
  <time>00:00:00:02.801 </time>
</status>

<error>
  <unique>0x0</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 1 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80581A2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 2 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80669C1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80586EE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidArray_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x2</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 3 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80669C1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8058DF2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidMinItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x3</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 4 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80669C1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8059568</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidMinItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x4</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 5 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804D805</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x5</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 6 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804D878</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x6</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 7 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804DBC8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x7</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 8 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804DC40</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x8</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 9 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804E262</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidInteger_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x9</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 10 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804E90D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidInteger_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xa</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 11 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804F172</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xb</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 12 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804F70A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xc</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 13 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804FCEE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ExlcusiveMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xd</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 14 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805029A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xe</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 15 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8050832</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xf</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 16 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8050E16</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ExlcusiveMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x10</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 17 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80513C2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x11</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 18 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8051ACC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x12</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 19 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065E35</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8052018</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidNumber_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x13</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 20 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065E35</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80526C6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidNumber_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x14</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 21 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065E35</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8052C48</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x15</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 22 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065E35</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80531E0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x16</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 23 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065E35</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80537C4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ExlcusiveMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x17</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 24 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065E35</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8053D70</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x18</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 25 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065E35</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8054308</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x19</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 26 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065E35</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80548EC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ExlcusiveMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 27 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065E35</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8054E9A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 28 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065E35</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8055434</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 29 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8055980</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidString_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 30 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8055EB6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidString_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 31 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8056438</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidMinLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 32 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80569D0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidMinLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x20</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 33 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8056F68</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidMaxLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x21</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 34 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8057500</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidMaxLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x22</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 35 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8057C0A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x23</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 36 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80669C1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8059C20</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidMaxItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x24</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 37 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80669C1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805A2D4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidMaxItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x25</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 38 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80669C1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x26</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 39 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x27</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 40 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80669C1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x28</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 41 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x29</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 42 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80669C1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x2a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 43 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x2b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 44 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80669C1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805BF6C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsList_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x2c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 45 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805BF6C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsList_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x2d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 46 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80669C1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805C50A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x2e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 47 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805C50A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x2f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 48 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80669C1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CABC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x30</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 49 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CABC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x31</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 50 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066F5F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CFBD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidObject_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x32</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 51 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066F5F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805D3E8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidObject_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x33</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 52 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066F5F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805D9BF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidMaxProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x34</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 53 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066F5F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805DE4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidMaxProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x35</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 54 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066F5F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805E328</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidMinProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x36</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 55 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066F5F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805E7FD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidMinProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x37</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 56 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066F5F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ECEB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidRequiredProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x38</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 57 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066F5F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805F1F8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidRequiredProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x39</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 58 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066F5F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x3a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 59 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80659EF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x3b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 60 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x3c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 61 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80669C1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x3d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 62 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066F5F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x3e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 63 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066F5F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x3f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 64 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x40</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 65 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80669C1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x41</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>4 bytes in 1 blocks are indirectly lost in loss record 66 of 433</text>
    <leakedbytes>4</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x42</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>5 bytes in 1 blocks are indirectly lost in loss record 67 of 433</text>
    <leakedbytes>5</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x808155F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8081B98</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::CZString::CZString(Json::Value::CZString const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096FE8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x43</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>5 bytes in 1 blocks are indirectly lost in loss record 68 of 433</text>
    <leakedbytes>5</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x808155F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8081B98</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::CZString::CZString(Json::Value::CZString const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096FE8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x44</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 69 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066A40</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8058DF2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidMinItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x45</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 70 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066A40</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8059568</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidMinItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x46</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 71 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065C75</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80513C2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x47</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 72 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065C75</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8051ACC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x48</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 73 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80662F9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8056438</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidMinLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x49</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 74 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80662F9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80569D0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidMinLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x4a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 75 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066382</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8056F68</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidMaxLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x4b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 76 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066382</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8057500</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidMaxLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x4c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 77 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066AD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8059C20</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidMaxItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x4d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 78 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066AD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805A2D4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidMaxItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x4e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 79 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x4f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 80 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066B63</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805C50A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x50</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 81 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066B63</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CABC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x51</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 82 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806706F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805D9BF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidMaxProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x52</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 83 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806706F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805DE4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidMaxProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x53</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 84 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066FDE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805E328</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidMinProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x54</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 85 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066FDE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805E7FD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidMinProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x55</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 86 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069611</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::string&gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x806928B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Vector_base&lt;std::string, std::allocator&lt;std::string&gt; &gt;::_M_allocate(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8068AC9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt;::_M_insert_aux&lt;std::string&gt;(__gnu_cxx::__normal_iterator&lt;std::string*, std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt; &gt;, std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068323</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt;::emplace_back&lt;std::string&gt;(std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067E8B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt;::push_back(std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B2DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Required::Required(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x806711A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ECEB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidRequiredProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x56</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 87 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069611</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::string&gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x806928B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Vector_base&lt;std::string, std::allocator&lt;std::string&gt; &gt;::_M_allocate(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8068AC9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt;::_M_insert_aux&lt;std::string&gt;(__gnu_cxx::__normal_iterator&lt;std::string*, std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt; &gt;, std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068323</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt;::emplace_back&lt;std::string&gt;(std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067E8B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt;::push_back(std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B2DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Required::Required(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x806711A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805F1F8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidRequiredProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x57</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 88 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066A40</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x58</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 1 blocks are indirectly lost in loss record 89 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066B63</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x59</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 2 blocks are indirectly lost in loss record 90 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8074B7B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Function_base::_Base_manager&lt;std::__regex::_StartTagger&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt; &gt;::_M_clone(std::_Any_data&amp;, std::_Any_data const&amp;, std::integral_constant&lt;bool, false&gt;)</fn>
    </frame>
    <frame>
      <ip>0x807326C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Function_base::_Base_manager&lt;std::__regex::_StartTagger&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt; &gt;::_M_manager(std::_Any_data&amp;, std::_Any_data const&amp;, std::_Manager_operation)</fn>
    </frame>
    <frame>
      <ip>0x806CC4E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::function&lt;void ()(std::__regex::_PatternCursor const&amp;, std::__regex::_Results&amp;)&gt;::function(std::function&lt;void ()(std::__regex::_PatternCursor const&amp;, std::__regex::_Results&amp;)&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8076A2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_State::_State(std::__regex::_State const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8076AA3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::_Construct&lt;std::__regex::_State, std::__regex::_State const&amp;&gt;(std::__regex::_State*, std::__regex::_State const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8074EEA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_State* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*&gt;(__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*)</fn>
    </frame>
    <frame>
      <ip>0x8073675</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_State* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*&gt;(__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*)</fn>
    </frame>
    <frame>
      <ip>0x8072020</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_State* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*, std::__regex::_State&gt;(__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*, std::allocator&lt;std::__regex::_State&gt;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8070380</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt;::vector(std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E4A8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_Nfa::_Nfa(std::__regex::_Nfa const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E575</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::shared_ptr&lt;std::__regex::_Automaton&gt; std::__regex::__compile&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt;(__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, __gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, std::regex_traits&lt;char&gt;&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806D32E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::basic_regex&lt;char, std::regex_traits&lt;char&gt; &gt;::basic_regex&lt;std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806AC2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Pattern::Pattern(std::string)</fn>
    </frame>
    <frame>
      <ip>0x8066427</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x5a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 2 blocks are indirectly lost in loss record 91 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x5b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 2 blocks are indirectly lost in loss record 92 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x5c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 2 blocks are indirectly lost in loss record 93 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066282</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x5d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>8 bytes in 2 blocks are indirectly lost in loss record 94 of 433</text>
    <leakedbytes>8</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065E35</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x5e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>9 bytes in 1 blocks are indirectly lost in loss record 95 of 433</text>
    <leakedbytes>9</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x808155F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8081B98</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::CZString::CZString(Json::Value::CZString const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096FE8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x809276F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x5f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>11 bytes in 1 blocks are indirectly lost in loss record 96 of 433</text>
    <leakedbytes>11</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x8081661</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateAndPrefixStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80822F3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x60</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>11 bytes in 1 blocks are indirectly lost in loss record 97 of 433</text>
    <leakedbytes>11</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x808155F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8081B98</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::CZString::CZString(Json::Value::CZString const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096FE8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x61</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 98 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80581A2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x62</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 99 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806643F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80581A2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x63</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 100 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80669E3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80586EE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidArray_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x64</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 101 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80669E3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8058DF2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidMinItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x65</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 102 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066A66</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8058DF2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidMinItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x66</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 103 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80669E3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8059568</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidMinItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x67</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 104 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066A66</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8059568</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidMinItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x68</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 105 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804D805</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x69</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 106 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804D878</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x6a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 107 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804DBC8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x6b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 108 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804DC40</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x6c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 109 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804E262</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidInteger_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x6d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 110 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804E90D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidInteger_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x6e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 111 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804F172</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x6f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 112 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065AD6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804F172</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x70</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 113 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065B0A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804F172</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x71</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 114 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804F70A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x72</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 115 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065AD6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804F70A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x73</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 116 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065B0A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804F70A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x74</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 117 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804FCEE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ExlcusiveMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x75</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 118 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065AD6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804FCEE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ExlcusiveMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x76</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 119 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065B0A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804FCEE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ExlcusiveMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x77</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 120 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805029A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x78</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 121 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065C12</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805029A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x79</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 122 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8050832</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x7a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 123 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065C12</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8050832</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x7b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 124 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8050E16</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ExlcusiveMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x7c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 125 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065C12</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8050E16</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ExlcusiveMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x7d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 126 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80513C2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x7e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 127 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065C9B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80513C2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x7f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 128 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8051ACC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x80</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 129 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065C9B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8051ACC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x81</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 130 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065E57</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8052018</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidNumber_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x82</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 131 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065E57</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80526C6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidNumber_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x83</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 132 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065E57</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8052C48</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x84</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 133 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065F66</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8052C48</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x85</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 134 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065E57</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80531E0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x86</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 135 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065F66</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80531E0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x87</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 136 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065E57</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80537C4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ExlcusiveMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x88</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 137 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065F66</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80537C4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ExlcusiveMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x89</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 138 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065E57</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8053D70</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x8a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 139 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066024</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8053D70</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x8b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 140 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066058</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8053D70</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x8c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 141 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065E57</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8054308</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x8d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 142 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066024</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8054308</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x8e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 143 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066058</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8054308</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x8f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 144 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065E57</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80548EC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ExlcusiveMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x90</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 145 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066024</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80548EC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ExlcusiveMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x91</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 146 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066058</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80548EC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ExlcusiveMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x92</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 147 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065E57</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8054E9A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x93</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 148 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80660BF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8054E9A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x94</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 149 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80660EB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8054E9A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x95</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 150 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065E57</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8055434</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x96</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 151 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80660BF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8055434</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x97</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 152 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80660EB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8055434</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x98</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 153 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8055980</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidString_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x99</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 154 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8055EB6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidString_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x9a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 155 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8056438</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidMinLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x9b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 156 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066322</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8056438</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidMinLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x9c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 157 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80569D0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidMinLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x9d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 158 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066322</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80569D0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidMinLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x9e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 159 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8056F68</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidMaxLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x9f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 160 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80663AB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8056F68</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidMaxLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xa0</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 161 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8057500</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidMaxLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xa1</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 162 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80663AB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8057500</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidMaxLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xa2</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 163 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8057C0A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xa3</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 164 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806643F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8057C0A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xa4</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 165 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80669E3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8059C20</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidMaxItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xa5</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 166 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066AF7</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8059C20</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidMaxItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xa6</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 167 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80669E3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805A2D4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidMaxItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xa7</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 168 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066AF7</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805A2D4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidMaxItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xa8</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 169 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80669E3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xa9</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 170 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xaa</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 171 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066CFA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xab</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 172 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80669E3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xac</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 173 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xad</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 174 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066CFA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xae</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 175 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80669E3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xaf</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 176 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066CA5</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xb0</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 177 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xb1</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 178 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066CFA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xb2</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 179 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80669E3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805BF6C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsList_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xb3</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 180 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805BF6C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsList_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xb4</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 181 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066D63</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805BF6C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsList_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xb5</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 182 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80669E3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805C50A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xb6</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 183 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066B89</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805C50A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xb7</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 184 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805C50A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xb8</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 185 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066D63</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805C50A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xb9</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 186 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80669E3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CABC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xba</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 187 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066B89</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CABC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xbb</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 188 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CABC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xbc</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 189 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066D63</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CABC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xbd</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 190 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066F81</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CFBD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidObject_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xbe</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 191 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066F81</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805D3E8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidObject_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xbf</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 192 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066F81</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805D9BF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidMaxProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xc0</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 193 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067095</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805D9BF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidMaxProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xc1</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 194 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066F81</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805DE4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidMaxProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xc2</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 195 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067095</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805DE4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidMaxProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xc3</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 196 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066F81</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805E328</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidMinProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xc4</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 197 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067004</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805E328</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidMinProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xc5</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 198 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066F81</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805E7FD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidMinProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xc6</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 199 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067004</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805E7FD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidMinProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xc7</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 200 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066F81</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ECEB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidRequiredProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xc8</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 201 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067132</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ECEB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidRequiredProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xc9</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 202 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066F81</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805F1F8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidRequiredProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xca</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 203 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067132</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805F1F8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidRequiredProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xcb</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 204 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066F81</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xcc</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 205 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065A11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xcd</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 206 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xce</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 207 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80678A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xcf</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 208 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067231</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xd0</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 209 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80669E3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xd1</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 210 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066F81</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xd2</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 211 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067132</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xd3</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 212 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066F81</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xd4</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 213 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067132</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xd5</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 214 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067231</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xd6</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 215 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xd7</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 216 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065F66</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xd8</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 217 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80669E3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xd9</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 218 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066A66</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xda</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 219 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066B89</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xdb</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 220 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xdc</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 221 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066D63</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xdd</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 222 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067231</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xde</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are indirectly lost in loss record 223 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8066D63</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xdf</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>12 bytes in 3 blocks are indirectly lost in loss record 224 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065E35</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xe0</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are definitely lost in loss record 225 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80678A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804D9E1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xe1</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are definitely lost in loss record 226 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80678A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804DA59</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xe2</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are definitely lost in loss record 227 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80678C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804DDA6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xe3</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>12 bytes in 1 blocks are definitely lost in loss record 228 of 433</text>
    <leakedbytes>12</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80678C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804DE1E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xe4</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 229 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8073694</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;std::__regex::_Nfa*&gt;(std::__regex::_Nfa*)</fn>
    </frame>
    <frame>
      <ip>0x8072046</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__shared_ptr&lt;std::__regex::_Automaton, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::__regex::_Nfa&gt;(std::__regex::_Nfa*)</fn>
    </frame>
    <frame>
      <ip>0x80703BF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::shared_ptr&lt;std::__regex::_Automaton&gt;::shared_ptr&lt;std::__regex::_Nfa&gt;(std::__regex::_Nfa*)</fn>
    </frame>
    <frame>
      <ip>0x806E584</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::shared_ptr&lt;std::__regex::_Automaton&gt; std::__regex::__compile&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt;(__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, __gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, std::regex_traits&lt;char&gt;&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806D32E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::basic_regex&lt;char, std::regex_traits&lt;char&gt; &gt;::basic_regex&lt;std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806AC2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Pattern::Pattern(std::string)</fn>
    </frame>
    <frame>
      <ip>0x8066427</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80581A2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xe5</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 230 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065BD8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805029A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xe6</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 231 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065BD8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8050832</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xe7</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 232 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065BD8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonInteger::JsonInteger(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067801</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8050E16</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ExlcusiveMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xe8</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 233 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065F2C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8052C48</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xe9</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 234 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065F2C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80531E0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xea</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 235 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065F2C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80537C4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ExlcusiveMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xeb</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 236 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8073694</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;std::__regex::_Nfa*&gt;(std::__regex::_Nfa*)</fn>
    </frame>
    <frame>
      <ip>0x8072046</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__shared_ptr&lt;std::__regex::_Automaton, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::__regex::_Nfa&gt;(std::__regex::_Nfa*)</fn>
    </frame>
    <frame>
      <ip>0x80703BF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::shared_ptr&lt;std::__regex::_Automaton&gt;::shared_ptr&lt;std::__regex::_Nfa&gt;(std::__regex::_Nfa*)</fn>
    </frame>
    <frame>
      <ip>0x806E584</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::shared_ptr&lt;std::__regex::_Automaton&gt; std::__regex::__compile&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt;(__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, __gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, std::regex_traits&lt;char&gt;&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806D32E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::basic_regex&lt;char, std::regex_traits&lt;char&gt; &gt;::basic_regex&lt;std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806AC2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Pattern::Pattern(std::string)</fn>
    </frame>
    <frame>
      <ip>0x8066427</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8057C0A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xec</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 237 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8073B15</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;JsonPrimitive*&gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8072419</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Vector_base&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt;::_M_allocate(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x807075E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::vector&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt;::_M_insert_aux&lt;JsonPrimitive*&gt;(__gnu_cxx::__normal_iterator&lt;JsonPrimitive**, std::vector&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt; &gt;, JsonPrimitive*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E70F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::vector&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt;::emplace_back&lt;JsonPrimitive*&gt;(JsonPrimitive*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806D3D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::vector&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt;::push_back(JsonPrimitive*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AE29</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xed</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 238 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8073B15</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;JsonPrimitive*&gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8072419</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Vector_base&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt;::_M_allocate(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x807075E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::vector&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt;::_M_insert_aux&lt;JsonPrimitive*&gt;(__gnu_cxx::__normal_iterator&lt;JsonPrimitive**, std::vector&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt; &gt;, JsonPrimitive*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E70F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::vector&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt;::emplace_back&lt;JsonPrimitive*&gt;(JsonPrimitive*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806D3D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::vector&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt;::push_back(JsonPrimitive*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AE29</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xee</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 239 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8073B15</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;JsonPrimitive*&gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8072419</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Vector_base&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt;::_M_allocate(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x807075E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::vector&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt;::_M_insert_aux&lt;JsonPrimitive*&gt;(__gnu_cxx::__normal_iterator&lt;JsonPrimitive**, std::vector&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt; &gt;, JsonPrimitive*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E70F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::vector&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt;::emplace_back&lt;JsonPrimitive*&gt;(JsonPrimitive*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806D3D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::vector&lt;JsonPrimitive*, std::allocator&lt;JsonPrimitive*&gt; &gt;::push_back(JsonPrimitive*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AE29</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xef</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 240 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806710C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ECEB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidRequiredProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xf0</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 241 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806710C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805F1F8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidRequiredProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xf1</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 242 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806710C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xf2</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 243 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069611</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::string&gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x806928B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Vector_base&lt;std::string, std::allocator&lt;std::string&gt; &gt;::_M_allocate(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8068AC9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt;::_M_insert_aux&lt;std::string&gt;(__gnu_cxx::__normal_iterator&lt;std::string*, std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt; &gt;, std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068323</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt;::emplace_back&lt;std::string&gt;(std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067E8B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt;::push_back(std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B2DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Required::Required(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x806711A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xf3</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 244 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806710C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xf4</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 245 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069611</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::string&gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x806928B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Vector_base&lt;std::string, std::allocator&lt;std::string&gt; &gt;::_M_allocate(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8068AC9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt;::_M_insert_aux&lt;std::string&gt;(__gnu_cxx::__normal_iterator&lt;std::string*, std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt; &gt;, std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068323</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt;::emplace_back&lt;std::string&gt;(std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067E8B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::vector&lt;std::string, std::allocator&lt;std::string&gt; &gt;::push_back(std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B2DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Required::Required(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x806711A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xf5</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 1 blocks are indirectly lost in loss record 246 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8065F2C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xf6</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>16 bytes in 2 blocks are indirectly lost in loss record 247 of 433</text>
    <leakedbytes>16</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8074E01</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Function_base::_Base_manager&lt;std::__regex::_EndTagger&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt; &gt;::_M_clone(std::_Any_data&amp;, std::_Any_data const&amp;, std::integral_constant&lt;bool, false&gt;)</fn>
    </frame>
    <frame>
      <ip>0x8073568</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Function_base::_Base_manager&lt;std::__regex::_EndTagger&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt; &gt;::_M_manager(std::_Any_data&amp;, std::_Any_data const&amp;, std::_Manager_operation)</fn>
    </frame>
    <frame>
      <ip>0x806CC4E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::function&lt;void ()(std::__regex::_PatternCursor const&amp;, std::__regex::_Results&amp;)&gt;::function(std::function&lt;void ()(std::__regex::_PatternCursor const&amp;, std::__regex::_Results&amp;)&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8076A2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_State::_State(std::__regex::_State const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8076AA3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::_Construct&lt;std::__regex::_State, std::__regex::_State const&amp;&gt;(std::__regex::_State*, std::__regex::_State const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8074EEA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_State* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*&gt;(__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*)</fn>
    </frame>
    <frame>
      <ip>0x8073675</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_State* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*&gt;(__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*)</fn>
    </frame>
    <frame>
      <ip>0x8072020</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_State* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*, std::__regex::_State&gt;(__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*, std::allocator&lt;std::__regex::_State&gt;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8070380</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt;::vector(std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E4A8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_Nfa::_Nfa(std::__regex::_Nfa const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E575</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::shared_ptr&lt;std::__regex::_Automaton&gt; std::__regex::__compile&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt;(__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, __gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, std::regex_traits&lt;char&gt;&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806D32E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::basic_regex&lt;char, std::regex_traits&lt;char&gt; &gt;::basic_regex&lt;std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806AC2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Pattern::Pattern(std::string)</fn>
    </frame>
    <frame>
      <ip>0x8066427</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xf7</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>17 bytes in 3 blocks are indirectly lost in loss record 248 of 433</text>
    <leakedbytes>17</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x808155F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8081B98</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::CZString::CZString(Json::Value::CZString const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096FE8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xf8</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 249 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066419</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80581A2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xf9</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 250 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8073F4E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;int&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8072C0C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x8071689</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;int&gt;* std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_create_node&lt;int const&amp;&gt;(int const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8071AB6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;int&gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x806FD2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_copy(std::_Rb_tree_node&lt;int&gt; const*, std::_Rb_tree_node&lt;int&gt;*)</fn>
    </frame>
    <frame>
      <ip>0x806E10C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_Rb_tree(std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806D113</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::set&lt;int, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::set(std::set&lt;int, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E4E1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_Nfa::_Nfa(std::__regex::_Nfa const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E575</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::shared_ptr&lt;std::__regex::_Automaton&gt; std::__regex::__compile&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt;(__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, __gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, std::regex_traits&lt;char&gt;&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806D32E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::basic_regex&lt;char, std::regex_traits&lt;char&gt; &gt;::basic_regex&lt;std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806AC2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Pattern::Pattern(std::string)</fn>
    </frame>
    <frame>
      <ip>0x8066427</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80581A2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidRegex_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xfa</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 251 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066419</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8057C0A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xfb</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 252 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8073F4E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;int&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8072C0C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x8071689</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;int&gt;* std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_create_node&lt;int const&amp;&gt;(int const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8071AB6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;int&gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x806FD2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_M_copy(std::_Rb_tree_node&lt;int&gt; const*, std::_Rb_tree_node&lt;int&gt;*)</fn>
    </frame>
    <frame>
      <ip>0x806E10C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::_Rb_tree(std::_Rb_tree&lt;int, int, std::_Identity&lt;int&gt;, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806D113</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::set&lt;int, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt;::set(std::set&lt;int, std::less&lt;int&gt;, std::allocator&lt;int&gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E4E1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_Nfa::_Nfa(std::__regex::_Nfa const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E575</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::shared_ptr&lt;std::__regex::_Automaton&gt; std::__regex::__compile&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt;(__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, __gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, std::regex_traits&lt;char&gt;&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806D32E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::basic_regex&lt;char, std::regex_traits&lt;char&gt; &gt;::basic_regex&lt;std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806AC2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Pattern::Pattern(std::string)</fn>
    </frame>
    <frame>
      <ip>0x8066427</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8057C0A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidRegex_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xfc</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 253 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xfd</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 254 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xfe</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 255 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0xff</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 256 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805BF6C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsList_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x100</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 257 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805C50A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x101</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 258 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CABC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x102</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 259 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x103</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 260 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x104</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 261 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806785C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x105</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 262 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806785C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x106</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 263 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x107</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 264 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067880</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x108</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 1 blocks are indirectly lost in loss record 265 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x109</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>20 bytes in 3 blocks are indirectly lost in loss record 266 of 433</text>
    <leakedbytes>20</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x808155F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8081B98</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::CZString::CZString(Json::Value::CZString const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096FE8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x10a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 267 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x10b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 268 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x10c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 269 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x10d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 270 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x10e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 271 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x10f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 272 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x110</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 273 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x111</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 274 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x112</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 275 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x113</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 276 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805BF6C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsList_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x114</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 277 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805C50A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x115</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 278 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CABC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x116</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 279 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x117</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 280 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x118</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 281 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x119</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 282 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8076EB1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x80757B6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x8073C41</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;* std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x807273D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x807289B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8070E18</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_unique_&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806EBA1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::map&lt;std::string, JsonPrimitive*, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::insert&lt;std::pair&lt;std::string, JsonPrimitive*&gt;, void&gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806D648</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;std::string, JsonPrimitive*, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::operator[](std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B4AC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x11a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 283 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x11b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 284 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x11c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 285 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x11d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 286 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x809276F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x11e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 287 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x11f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 288 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x120</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 289 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x121</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 290 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x122</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 291 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x123</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 292 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x124</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 293 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8076EB1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x80757B6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x8073C41</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;* std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x807273D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x807289B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8070E18</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_unique_&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806EBA1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::map&lt;std::string, JsonPrimitive*, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::insert&lt;std::pair&lt;std::string, JsonPrimitive*&gt;, void&gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806D648</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;std::string, JsonPrimitive*, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::operator[](std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B4AC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x125</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 294 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8076EB1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x80757B6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x8073C41</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;* std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x807273D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x807289B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, bool&gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8070E18</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_unique_&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806EBA1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::map&lt;std::string, JsonPrimitive*, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::insert&lt;std::pair&lt;std::string, JsonPrimitive*&gt;, void&gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806D648</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;std::string, JsonPrimitive*, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::operator[](std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B4AC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x126</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 1 blocks are indirectly lost in loss record 295 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x127</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 2 blocks are indirectly lost in loss record 296 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x128</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 2 blocks are indirectly lost in loss record 297 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x129</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 2 blocks are indirectly lost in loss record 298 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80662A4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x12a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 2 blocks are indirectly lost in loss record 299 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065E57</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x12b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>24 bytes in 4 blocks are indirectly lost in loss record 300 of 433</text>
    <leakedbytes>24</leakedbytes>
    <leakedblocks>4</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x808155F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8081B98</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::CZString::CZString(Json::Value::CZString const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096FE8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x12c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>26 bytes in 5 blocks are indirectly lost in loss record 301 of 433</text>
    <leakedbytes>26</leakedbytes>
    <leakedblocks>5</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x808155F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8081B98</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::CZString::CZString(Json::Value::CZString const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096FE8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x12d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>29 bytes in 3 blocks are indirectly lost in loss record 302 of 433</text>
    <leakedbytes>29</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x808155F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8081B98</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::CZString::CZString(Json::Value::CZString const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096FE8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x12e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>29 bytes in 3 blocks are indirectly lost in loss record 303 of 433</text>
    <leakedbytes>29</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x8081661</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateAndPrefixStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80822F3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x12f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>32 bytes in 1 blocks are indirectly lost in loss record 304 of 433</text>
    <leakedbytes>32</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066D3D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805BF6C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsList_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x130</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>32 bytes in 1 blocks are indirectly lost in loss record 305 of 433</text>
    <leakedbytes>32</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066D3D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805C50A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x131</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>32 bytes in 1 blocks are indirectly lost in loss record 306 of 433</text>
    <leakedbytes>32</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066D3D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CABC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x132</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>32 bytes in 1 blocks are indirectly lost in loss record 307 of 433</text>
    <leakedbytes>32</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066D3D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x133</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>32 bytes in 1 blocks are indirectly lost in loss record 308 of 433</text>
    <leakedbytes>32</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066D3D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x134</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>32 bytes in 2 blocks are indirectly lost in loss record 309 of 433</text>
    <leakedbytes>32</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x40DC7D3</ip>
      <obj>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x40DEC01</ip>
      <obj>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(char const*, unsigned int, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B2C2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Required::Required(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x806711A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ECEB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidRequiredProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x135</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>32 bytes in 2 blocks are indirectly lost in loss record 310 of 433</text>
    <leakedbytes>32</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x40DC7D3</ip>
      <obj>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x40DEC01</ip>
      <obj>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(char const*, unsigned int, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B2C2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Required::Required(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x806711A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805F1F8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidRequiredProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x136</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>32 bytes in 4 blocks are indirectly lost in loss record 311 of 433</text>
    <leakedbytes>32</leakedbytes>
    <leakedblocks>4</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80783E3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Function_base::_Base_manager&lt;std::__regex::_CharMatcher&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt; &gt;::_M_clone(std::_Any_data&amp;, std::_Any_data const&amp;, std::integral_constant&lt;bool, false&gt;)</fn>
    </frame>
    <frame>
      <ip>0x8077C93</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Function_base::_Base_manager&lt;std::__regex::_CharMatcher&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt; &gt;::_M_manager(std::_Any_data&amp;, std::_Any_data const&amp;, std::_Manager_operation)</fn>
    </frame>
    <frame>
      <ip>0x806CBCC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::function&lt;bool ()(std::__regex::_PatternCursor const&amp;)&gt;::function(std::function&lt;bool ()(std::__regex::_PatternCursor const&amp;)&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8076A46</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_State::_State(std::__regex::_State const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8076AA3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::_Construct&lt;std::__regex::_State, std::__regex::_State const&amp;&gt;(std::__regex::_State*, std::__regex::_State const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8074EEA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_State* std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*&gt;(__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*)</fn>
    </frame>
    <frame>
      <ip>0x8073675</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_State* std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*&gt;(__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*)</fn>
    </frame>
    <frame>
      <ip>0x8072020</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_State* std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*, std::__regex::_State&gt;(__gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__regex::_State const*, std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; &gt;, std::__regex::_State*, std::allocator&lt;std::__regex::_State&gt;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8070380</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt;::vector(std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E4A8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_Nfa::_Nfa(std::__regex::_Nfa const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E575</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::shared_ptr&lt;std::__regex::_Automaton&gt; std::__regex::__compile&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt;(__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, __gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, std::regex_traits&lt;char&gt;&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806D32E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::basic_regex&lt;char, std::regex_traits&lt;char&gt; &gt;::basic_regex&lt;std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806AC2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Pattern::Pattern(std::string)</fn>
    </frame>
    <frame>
      <ip>0x8066427</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x137</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>36 bytes in 3 blocks are indirectly lost in loss record 312 of 433</text>
    <leakedbytes>36</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8069523</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_List_node&lt;KeywordValidator*&gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8069148</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_base&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80688D9</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_List_node&lt;KeywordValidator*&gt;* std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_create_node&lt;KeywordValidator*&gt;(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8068271</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::_M_insert&lt;KeywordValidator*&gt;(std::_List_iterator&lt;KeywordValidator*&gt;, KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067DE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::list&lt;KeywordValidator*, std::allocator&lt;KeywordValidator*&gt; &gt;::push_back(KeywordValidator*&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8065E57</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonNumber::JsonNumber(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067825</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x138</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>36 (20 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 313 of 433</text>
    <leakedbytes>36</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067880</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80586EE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidArray_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x139</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>36 (20 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 314 of 433</text>
    <leakedbytes>36</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804D805</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x13a</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>36 (20 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 315 of 433</text>
    <leakedbytes>36</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804D878</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x13b</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>36 (20 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 316 of 433</text>
    <leakedbytes>36</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804DBC8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x13c</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>36 (20 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 317 of 433</text>
    <leakedbytes>36</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804DC40</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>createPrimitive_Positive_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x13d</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>36 (20 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 318 of 433</text>
    <leakedbytes>36</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804E262</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidInteger_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x13e</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>36 (20 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 319 of 433</text>
    <leakedbytes>36</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804E90D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidInteger_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x13f</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>36 (20 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 320 of 433</text>
    <leakedbytes>36</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067814</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8052018</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidNumber_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x140</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>36 (20 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 321 of 433</text>
    <leakedbytes>36</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067814</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80526C6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidNumber_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x141</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>36 (20 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 322 of 433</text>
    <leakedbytes>36</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8055980</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidString_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x142</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>36 (20 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 323 of 433</text>
    <leakedbytes>36</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8055EB6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidString_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x143</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>36 (20 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 324 of 433</text>
    <leakedbytes>36</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806785C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CFBD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidObject_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x144</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>36 (20 direct, 16 indirect) bytes in 1 blocks are definitely lost in loss record 325 of 433</text>
    <leakedbytes>36</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806785C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805D3E8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidObject_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x145</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>40 bytes in 1 blocks are indirectly lost in loss record 326 of 433</text>
    <leakedbytes>40</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066CD4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x146</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>40 bytes in 1 blocks are indirectly lost in loss record 327 of 433</text>
    <leakedbytes>40</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066CD4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x147</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>40 bytes in 1 blocks are indirectly lost in loss record 328 of 433</text>
    <leakedbytes>40</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8066CD4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x148</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>40 bytes in 2 blocks are indirectly lost in loss record 329 of 433</text>
    <leakedbytes>40</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x149</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>40 bytes in 2 blocks are indirectly lost in loss record 330 of 433</text>
    <leakedbytes>40</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x14a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>40 bytes in 2 blocks are indirectly lost in loss record 331 of 433</text>
    <leakedbytes>40</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AE11</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x14b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>40 bytes in 2 blocks are indirectly lost in loss record 332 of 433</text>
    <leakedbytes>40</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067814</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x14c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 333 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x14d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 334 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x14e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 335 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x14f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 336 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x150</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 337 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x151</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 338 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x152</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 339 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x153</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 340 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x154</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 341 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x155</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 342 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805BF6C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsList_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x156</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 343 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805C50A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x157</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 344 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CABC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x158</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 345 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x159</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 346 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x15a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 347 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x15b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 348 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x15c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 349 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x15d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 350 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x15e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 351 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x809276F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x15f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 352 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x160</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 353 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x161</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 354 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x162</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 355 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x163</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 356 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x164</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 357 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x165</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 1 blocks are indirectly lost in loss record 358 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x166</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 2 blocks are indirectly lost in loss record 359 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8076EB1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x80757B6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x8073C41</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;* std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x807273D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8070DEF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_unique_&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806EBA1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::map&lt;std::string, JsonPrimitive*, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::insert&lt;std::pair&lt;std::string, JsonPrimitive*&gt;, void&gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806D648</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;std::string, JsonPrimitive*, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::operator[](std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B4AC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x167</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 2 blocks are indirectly lost in loss record 360 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x168</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>48 bytes in 2 blocks are indirectly lost in loss record 361 of 433</text>
    <leakedbytes>48</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8076EB1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x80757B6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x8073C41</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;* std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x807273D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8070DEF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_unique_&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806EBA1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::map&lt;std::string, JsonPrimitive*, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::insert&lt;std::pair&lt;std::string, JsonPrimitive*&gt;, void&gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806D648</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;std::string, JsonPrimitive*, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::operator[](std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B4AC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x169</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>50 bytes in 3 blocks are indirectly lost in loss record 362 of 433</text>
    <leakedbytes>50</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x40DC7D3</ip>
      <obj>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x40DEC01</ip>
      <obj>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(char const*, unsigned int, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B2C2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Required::Required(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x806711A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x16a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>52 bytes in 1 blocks are indirectly lost in loss record 363 of 433</text>
    <leakedbytes>52</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806E567</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::shared_ptr&lt;std::__regex::_Automaton&gt; std::__regex::__compile&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt;(__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, __gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, std::regex_traits&lt;char&gt;&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806D32E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::basic_regex&lt;char, std::regex_traits&lt;char&gt; &gt;::basic_regex&lt;std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806AC2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Pattern::Pattern(std::string)</fn>
    </frame>
    <frame>
      <ip>0x8066427</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80581A2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x16b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>52 bytes in 1 blocks are indirectly lost in loss record 364 of 433</text>
    <leakedbytes>52</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806E567</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::shared_ptr&lt;std::__regex::_Automaton&gt; std::__regex::__compile&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt;(__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, __gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, std::regex_traits&lt;char&gt;&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806D32E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::basic_regex&lt;char, std::regex_traits&lt;char&gt; &gt;::basic_regex&lt;std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806AC2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Pattern::Pattern(std::string)</fn>
    </frame>
    <frame>
      <ip>0x8066427</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8057C0A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x16c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>52 bytes in 3 blocks are indirectly lost in loss record 365 of 433</text>
    <leakedbytes>52</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x40DC7D3</ip>
      <obj>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8091265</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>char* std::string::_S_construct_aux&lt;char const*&gt;(char const*, char const*, std::allocator&lt;char&gt; const&amp;, std::__false_type)</fn>
    </frame>
    <frame>
      <ip>0x808DFE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>char* std::string::_S_construct&lt;char const*&gt;(char const*, char const*, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808CB0C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char const*&gt;(char const*, char const*, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80812FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::ValueIteratorBase::name() const</fn>
    </frame>
    <frame>
      <ip>0x806B494</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x16d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>56 bytes in 1 blocks are indirectly lost in loss record 366 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067203</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x16e</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>56 bytes in 1 blocks are indirectly lost in loss record 367 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067203</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x16f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>56 bytes in 1 blocks are indirectly lost in loss record 368 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067203</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x170</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>56 bytes in 3 blocks are indirectly lost in loss record 369 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x40DC7D3</ip>
      <obj>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x40DEC01</ip>
      <obj>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(char const*, unsigned int, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B2C2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Required::Required(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x806711A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x171</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>56 bytes in 3 blocks are indirectly lost in loss record 370 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x40DC7D3</ip>
      <obj>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8091265</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>char* std::string::_S_construct_aux&lt;char const*&gt;(char const*, char const*, std::allocator&lt;char&gt; const&amp;, std::__false_type)</fn>
    </frame>
    <frame>
      <ip>0x808DFE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>char* std::string::_S_construct&lt;char const*&gt;(char const*, char const*, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808CB0C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char const*&gt;(char const*, char const*, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80812FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::ValueIteratorBase::name() const</fn>
    </frame>
    <frame>
      <ip>0x806B494</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x172</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>56 (20 direct, 36 indirect) bytes in 1 blocks are definitely lost in loss record 371 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067880</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8058DF2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidMinItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x173</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>56 (20 direct, 36 indirect) bytes in 1 blocks are definitely lost in loss record 372 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067880</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8059568</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidMinItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x174</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>56 (20 direct, 36 indirect) bytes in 1 blocks are definitely lost in loss record 373 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067880</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8059C20</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidMaxItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x175</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>56 (20 direct, 36 indirect) bytes in 1 blocks are definitely lost in loss record 374 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80513C2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x176</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>56 (20 direct, 36 indirect) bytes in 1 blocks are definitely lost in loss record 375 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8051ACC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x177</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>56 (20 direct, 36 indirect) bytes in 1 blocks are definitely lost in loss record 376 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8056438</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidMinLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x178</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>56 (20 direct, 36 indirect) bytes in 1 blocks are definitely lost in loss record 377 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80569D0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidMinLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x179</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>56 (20 direct, 36 indirect) bytes in 1 blocks are definitely lost in loss record 378 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8056F68</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidMaxLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x17a</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>56 (20 direct, 36 indirect) bytes in 1 blocks are definitely lost in loss record 379 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8057500</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidMaxLength_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x17b</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>56 (20 direct, 36 indirect) bytes in 1 blocks are definitely lost in loss record 380 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067880</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805A2D4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidMaxItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x17c</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>56 (20 direct, 36 indirect) bytes in 1 blocks are definitely lost in loss record 381 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806785C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805D9BF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidMaxProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x17d</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>56 (20 direct, 36 indirect) bytes in 1 blocks are definitely lost in loss record 382 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806785C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805DE4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidMaxProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x17e</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>56 (20 direct, 36 indirect) bytes in 1 blocks are definitely lost in loss record 383 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806785C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805E328</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidMinProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x17f</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>56 (20 direct, 36 indirect) bytes in 1 blocks are definitely lost in loss record 384 of 433</text>
    <leakedbytes>56</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806785C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805E7FD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidMinProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x180</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>58 bytes in 11 blocks are indirectly lost in loss record 385 of 433</text>
    <leakedbytes>58</leakedbytes>
    <leakedblocks>11</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x808155F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8081B98</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::CZString::CZString(Json::Value::CZString const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096FE8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x181</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>59 bytes in 5 blocks are indirectly lost in loss record 386 of 433</text>
    <leakedbytes>59</leakedbytes>
    <leakedblocks>5</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x8081661</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateAndPrefixStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80822F3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806AF62</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x182</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>60 bytes in 3 blocks are indirectly lost in loss record 387 of 433</text>
    <leakedbytes>60</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067814</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806B47F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x183</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>60 (20 direct, 40 indirect) bytes in 1 blocks are definitely lost in loss record 388 of 433</text>
    <leakedbytes>60</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804F172</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x184</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>60 (20 direct, 40 indirect) bytes in 1 blocks are definitely lost in loss record 389 of 433</text>
    <leakedbytes>60</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804F70A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x185</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>60 (20 direct, 40 indirect) bytes in 1 blocks are definitely lost in loss record 390 of 433</text>
    <leakedbytes>60</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x804FCEE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ExlcusiveMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x186</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>60 (20 direct, 40 indirect) bytes in 1 blocks are definitely lost in loss record 391 of 433</text>
    <leakedbytes>60</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067814</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8053D70</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x187</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>60 (20 direct, 40 indirect) bytes in 1 blocks are definitely lost in loss record 392 of 433</text>
    <leakedbytes>60</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067814</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8054308</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x188</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>60 (20 direct, 40 indirect) bytes in 1 blocks are definitely lost in loss record 393 of 433</text>
    <leakedbytes>60</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067814</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80548EC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ExlcusiveMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x189</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>60 (20 direct, 40 indirect) bytes in 1 blocks are definitely lost in loss record 394 of 433</text>
    <leakedbytes>60</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067814</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8054E9A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x18a</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>60 (20 direct, 40 indirect) bytes in 1 blocks are definitely lost in loss record 395 of 433</text>
    <leakedbytes>60</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067814</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8055434</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMultipleOf_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x18b</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>64 (20 direct, 44 indirect) bytes in 1 blocks are definitely lost in loss record 396 of 433</text>
    <leakedbytes>64</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805029A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ValidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x18c</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>64 (20 direct, 44 indirect) bytes in 1 blocks are definitely lost in loss record 397 of 433</text>
    <leakedbytes>64</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8050832</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_InvalidMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x18d</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>64 (20 direct, 44 indirect) bytes in 1 blocks are definitely lost in loss record 398 of 433</text>
    <leakedbytes>64</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80677F0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8050E16</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>IntegerPrimitive_ExlcusiveMaximum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x18e</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>64 (20 direct, 44 indirect) bytes in 1 blocks are definitely lost in loss record 399 of 433</text>
    <leakedbytes>64</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067814</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8052C48</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ValidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x18f</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>64 (20 direct, 44 indirect) bytes in 1 blocks are definitely lost in loss record 400 of 433</text>
    <leakedbytes>64</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067814</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80531E0</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_InvalidMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x190</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>64 (20 direct, 44 indirect) bytes in 1 blocks are definitely lost in loss record 401 of 433</text>
    <leakedbytes>64</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067814</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80537C4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>NumberPrimitive_ExlcusiveMinimum_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x191</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>72 bytes in 3 blocks are indirectly lost in loss record 402 of 433</text>
    <leakedbytes>72</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806ADCE</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsTuple::ItemsTuple(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066CE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x192</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>72 bytes in 3 blocks are indirectly lost in loss record 403 of 433</text>
    <leakedbytes>72</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x193</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>72 bytes in 3 blocks are indirectly lost in loss record 404 of 433</text>
    <leakedbytes>72</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x194</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>90 bytes in 5 blocks are indirectly lost in loss record 405 of 433</text>
    <leakedbytes>90</leakedbytes>
    <leakedblocks>5</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x40DC7D3</ip>
      <obj>/usr/lib/i386-linux-gnu/libstdc++.so.6.0.16</obj>
      <fn>std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8091265</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>char* std::string::_S_construct_aux&lt;char const*&gt;(char const*, char const*, std::allocator&lt;char&gt; const&amp;, std::__false_type)</fn>
    </frame>
    <frame>
      <ip>0x808DFE2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>char* std::string::_S_construct&lt;char const*&gt;(char const*, char const*, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808CB0C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;char const*&gt;(char const*, char const*, std::allocator&lt;char&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80812FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::ValueIteratorBase::name() const</fn>
    </frame>
    <frame>
      <ip>0x806B494</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x195</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>96 bytes in 2 blocks are indirectly lost in loss record 406 of 433</text>
    <leakedbytes>96</leakedbytes>
    <leakedblocks>2</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B3ED</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x196</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>96 bytes in 4 blocks are indirectly lost in loss record 407 of 433</text>
    <leakedbytes>96</leakedbytes>
    <leakedblocks>4</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8076EB1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x80757B6</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x8073C41</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;* std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x807273D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8070DEF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::_Rb_tree&lt;std::string, std::pair&lt;std::string const, JsonPrimitive*&gt;, std::_Select1st&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::_M_insert_unique_&lt;std::pair&lt;std::string, JsonPrimitive*&gt; &gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806EBA1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; std::map&lt;std::string, JsonPrimitive*, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::insert&lt;std::pair&lt;std::string, JsonPrimitive*&gt;, void&gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt;, std::pair&lt;std::string, JsonPrimitive*&gt;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806D648</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;std::string, JsonPrimitive*, std::less&lt;std::string&gt;, std::allocator&lt;std::pair&lt;std::string const, JsonPrimitive*&gt; &gt; &gt;::operator[](std::string&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806B4AC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Properties::Properties(Json::Value, bool)</fn>
    </frame>
    <frame>
      <ip>0x8067219</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonObject::JsonObject(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806786D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806AF8D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ItemsList::ItemsList(Json::Value)</fn>
    </frame>
    <frame>
      <ip>0x8066D4B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonArray::JsonArray(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067891</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x197</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>96 bytes in 10 blocks are indirectly lost in loss record 408 of 433</text>
    <leakedbytes>96</leakedbytes>
    <leakedblocks>10</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x808155F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8081B98</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::CZString::CZString(Json::Value::CZString const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096FE8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x198</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>104 (20 direct, 84 indirect) bytes in 1 blocks are definitely lost in loss record 409 of 433</text>
    <leakedbytes>104</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806785C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ECEB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_InvalidRequiredProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x199</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>104 (20 direct, 84 indirect) bytes in 1 blocks are definitely lost in loss record 410 of 433</text>
    <leakedbytes>104</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806785C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805F1F8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidRequiredProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x19a</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>118 bytes in 11 blocks are indirectly lost in loss record 411 of 433</text>
    <leakedbytes>118</leakedbytes>
    <leakedblocks>11</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x8081661</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateAndPrefixStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80822F3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x19b</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>120 bytes in 5 blocks are indirectly lost in loss record 412 of 433</text>
    <leakedbytes>120</leakedbytes>
    <leakedblocks>5</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x19c</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>144 bytes in 3 blocks are indirectly lost in loss record 413 of 433</text>
    <leakedbytes>144</leakedbytes>
    <leakedblocks>3</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x19d</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>192 bytes in 8 blocks are indirectly lost in loss record 414 of 433</text>
    <leakedbytes>192</leakedbytes>
    <leakedblocks>8</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x808232F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x19e</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>205 (20 direct, 185 indirect) bytes in 1 blocks are definitely lost in loss record 415 of 433</text>
    <leakedbytes>205</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067880</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805BF6C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsList_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x19f</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>220 bytes in 36 blocks are indirectly lost in loss record 416 of 433</text>
    <leakedbytes>220</leakedbytes>
    <leakedblocks>36</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x808155F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8081B98</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::CZString::CZString(Json::Value::CZString const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096FE8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1a0</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>225 (20 direct, 205 indirect) bytes in 1 blocks are definitely lost in loss record 417 of 433</text>
    <leakedbytes>225</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067880</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805C50A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ValidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1a1</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>225 (20 direct, 205 indirect) bytes in 1 blocks are definitely lost in loss record 418 of 433</text>
    <leakedbytes>225</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067880</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805CABC</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_InvalidUniqueItems_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1a2</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>240 bytes in 1 blocks are indirectly lost in loss record 419 of 433</text>
    <leakedbytes>240</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8072BA7</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::__regex::_State&gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8071579</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Vector_base&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt;::_M_allocate(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8071F68</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Vector_base&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt;::_Vector_base(unsigned int, std::allocator&lt;std::__regex::_State&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x807032A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt;::vector(std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E4A8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_Nfa::_Nfa(std::__regex::_Nfa const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E575</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::shared_ptr&lt;std::__regex::_Automaton&gt; std::__regex::__compile&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt;(__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, __gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, std::regex_traits&lt;char&gt;&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806D32E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::basic_regex&lt;char, std::regex_traits&lt;char&gt; &gt;::basic_regex&lt;std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806AC2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Pattern::Pattern(std::string)</fn>
    </frame>
    <frame>
      <ip>0x8066427</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8057C0A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1a3</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>288 bytes in 6 blocks are indirectly lost in loss record 420 of 433</text>
    <leakedbytes>288</leakedbytes>
    <leakedblocks>6</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1a4</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>336 bytes in 1 blocks are indirectly lost in loss record 421 of 433</text>
    <leakedbytes>336</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8072BA7</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::__regex::_State&gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8071579</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Vector_base&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt;::_M_allocate(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8071F68</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Vector_base&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt;::_Vector_base(unsigned int, std::allocator&lt;std::__regex::_State&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x807032A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt;::vector(std::vector&lt;std::__regex::_State, std::allocator&lt;std::__regex::_State&gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E4A8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::__regex::_Nfa::_Nfa(std::__regex::_Nfa const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x806E575</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::shared_ptr&lt;std::__regex::_Automaton&gt; std::__regex::__compile&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::regex_traits&lt;char&gt; &gt;(__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, __gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; const&amp;, std::regex_traits&lt;char&gt;&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806D32E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::basic_regex&lt;char, std::regex_traits&lt;char&gt; &gt;::basic_regex&lt;std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;(std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806AC2E</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Pattern::Pattern(std::string)</fn>
    </frame>
    <frame>
      <ip>0x8066427</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonString::JsonString(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8067849</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80581A2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1a5</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>336 bytes in 7 blocks are indirectly lost in loss record 422 of 433</text>
    <leakedbytes>336</leakedbytes>
    <leakedblocks>7</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1a6</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>389 bytes in 30 blocks are indirectly lost in loss record 423 of 433</text>
    <leakedbytes>389</leakedbytes>
    <leakedblocks>30</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402BE68</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>malloc</fn>
    </frame>
    <frame>
      <ip>0x8081661</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::duplicateAndPrefixStringValue(char const*, unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x80822F3</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1a7</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>408 (20 direct, 388 indirect) bytes in 1 blocks are definitely lost in loss record 424 of 433</text>
    <leakedbytes>408</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x8057C0A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_ValidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1a8</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>536 (20 direct, 516 indirect) bytes in 1 blocks are definitely lost in loss record 425 of 433</text>
    <leakedbytes>536</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067838</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x80581A2</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>StringPrimitive_InvalidRegex_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1a9</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>645 (20 direct, 625 indirect) bytes in 1 blocks are definitely lost in loss record 426 of 433</text>
    <leakedbytes>645</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067880</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805ABA4</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_ItemsTuple_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1aa</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>645 (20 direct, 625 indirect) bytes in 1 blocks are definitely lost in loss record 427 of 433</text>
    <leakedbytes>645</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067880</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B254</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1ab</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>665 (20 direct, 645 indirect) bytes in 1 blocks are definitely lost in loss record 428 of 433</text>
    <leakedbytes>665</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067880</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805B97A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ArrayPrimitive_AdditionalItemsNotOk_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1ac</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>672 bytes in 14 blocks are indirectly lost in loss record 429 of 433</text>
    <leakedbytes>672</leakedbytes>
    <leakedblocks>14</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x80926FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1ad</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>762 (20 direct, 742 indirect) bytes in 1 blocks are definitely lost in loss record 430 of 433</text>
    <leakedbytes>762</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x806785C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x805FA7C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>ObjectPrimitive_ValidProperties_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
    <frame>
      <ip>0x80BE20B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>main</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1ae</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>768 bytes in 16 blocks are indirectly lost in loss record 431 of 433</text>
    <leakedbytes>768</leakedbytes>
    <leakedblocks>16</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x809272F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1af</unique>
  <tid>1</tid>
  <kind>Leak_IndirectlyLost</kind>
  <xwhat>
    <text>1,104 bytes in 23 blocks are indirectly lost in loss record 432 of 433</text>
    <leakedbytes>1104</leakedbytes>
    <leakedblocks>23</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8096FCD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::allocate(unsigned int, void const*)</fn>
    </frame>
    <frame>
      <ip>0x8096442</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_get_node()</fn>
    </frame>
    <frame>
      <ip>0x80960D1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
    <frame>
      <ip>0x808F924</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_Rb_tree(std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x808D50D</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::map(std::map&lt;Json::Value::CZString, Json::Value, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8082342</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Json::Value::Value(Json::Value const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8097000</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::pair&lt;Json::Value::CZString const, Json::Value&gt;::pair(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80975DB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8096F4A</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void __gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::construct&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*, std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x80960FF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;* std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&gt;(std::pair&lt;Json::Value::CZString const, Json::Value&gt; const&amp;&amp;&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8095022</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_clone_node(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*)</fn>
    </frame>
    <frame>
      <ip>0x80926C8</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>std::_Rb_tree&lt;Json::Value::CZString, std::pair&lt;Json::Value::CZString const, Json::Value&gt;, std::_Select1st&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;, std::less&lt;Json::Value::CZString&gt;, std::allocator&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; &gt;::_M_copy(std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt; const*, std::_Rb_tree_node&lt;std::pair&lt;Json::Value::CZString const, Json::Value&gt; &gt;*)</fn>
    </frame>
  </stack>
</error>

<error>
  <unique>0x1b0</unique>
  <tid>1</tid>
  <kind>Leak_DefinitelyLost</kind>
  <xwhat>
    <text>6,186 (20 direct, 6,166 indirect) bytes in 1 blocks are definitely lost in loss record 433 of 433</text>
    <leakedbytes>6186</leakedbytes>
    <leakedblocks>1</leakedblocks>
  </xwhat>
  <stack>
    <frame>
      <ip>0x402B9B4</ip>
      <obj>/usr/lib/valgrind/vgpreload_memcheck-x86-linux.so</obj>
      <fn>operator new(unsigned int)</fn>
    </frame>
    <frame>
      <ip>0x8067880</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonPrimitive::createPrimitive(Json::Value*)</fn>
    </frame>
    <frame>
      <ip>0x806768F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::parseSchema(std::string&amp;)</fn>
    </frame>
    <frame>
      <ip>0x8067513</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>JsonValidator::JsonValidator(char const*)</fn>
    </frame>
    <frame>
      <ip>0x80655AF</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>Validator_Basic_Test::TestBody()</fn>
    </frame>
    <frame>
      <ip>0x80B6EBB</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B2C0B</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>void testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::Test, void&gt;(testing::Test*, void (testing::Test::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x809CCD1</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::Test::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D3DA</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestInfo::Run()</fn>
    </frame>
    <frame>
      <ip>0x809D98C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::TestCase::Run()</fn>
    </frame>
    <frame>
      <ip>0x80A35BD</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::internal::UnitTestImpl::RunAllTests()</fn>
    </frame>
    <frame>
      <ip>0x80B7C7F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleSehExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80B374F</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>bool testing::internal::HandleExceptionsInMethodIfSupported&lt;testing::internal::UnitTestImpl, bool&gt;(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*)</fn>
    </frame>
    <frame>
      <ip>0x80A2450</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>testing::UnitTest::Run()</fn>
    </frame>
    <frame>
      <ip>0x80BE27C</ip>
      <obj>/home/nithin/jval/test/ut/jvalut</obj>
      <fn>RUN_ALL_TESTS()</fn>
    </frame>
  </stack>
</error>

<errorcounts>
</errorcounts>

<suppcounts>
</suppcounts>

</valgrindoutput>

